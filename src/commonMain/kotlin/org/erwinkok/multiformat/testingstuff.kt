package org.erwinkok.multiformat

import org.erwinkok.multiformat.util.*
import kotlin.math.exp


private val len8tab = ubyteArrayOf(
    0x00U, 0x01U, 0x02U, 0x02U, 0x03U, 0x03U, 0x03U, 0x03U, 0x04U, 0x04U, 0x04U, 0x04U, 0x04U, 0x04U, 0x04U, 0x04U,
    0x05U, 0x05U, 0x05U, 0x05U, 0x05U, 0x05U, 0x05U, 0x05U, 0x05U, 0x05U, 0x05U, 0x05U, 0x05U, 0x05U, 0x05U, 0x05U,
    0x06U, 0x06U, 0x06U, 0x06U, 0x06U, 0x06U, 0x06U, 0x06U, 0x06U, 0x06U, 0x06U, 0x06U, 0x06U, 0x06U, 0x06U, 0x06U,
    0x06U, 0x06U, 0x06U, 0x06U, 0x06U, 0x06U, 0x06U, 0x06U, 0x06U, 0x06U, 0x06U, 0x06U, 0x06U, 0x06U, 0x06U, 0x06U,
    0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U,
    0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U,
    0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U,
    0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U, 0x07U,
    0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U,
    0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U,
    0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U,
    0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U,
    0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U,
    0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U,
    0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U,
    0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U, 0x08U,
)

private fun len64(x: ULong): Int {
    var n = 0
    var vx = x
    if (vx >= (1uL shl 32)) {
        vx = vx shr 32
        n = 32
    }
    if (vx >= (1uL shl 16)) {
        vx = vx shr 16
        n += 16
    }
    if (vx >= (1uL shl 8)) {
        vx = vx shr 8
        n += 8
    }
    return n + len8tab[vx.toInt()].toInt()
}


    private fun uvarintSize(num: ULong): Int {
    val bits = len64(num)
    val q = bits / 7
    val r = bits % 7
    var size = q
    if (r > 0 || size == 0) {
        size++
    }
    return size
}

fun main() {
    for (i in 0uL..(1uL shl 16)) {
        println("Test nr: $i")
        val outputStream = CustomStream<Byte>()
        val expected = outputStream.writeUnsignedVarInt(i).expectNoErrors()
        println("In buffer A: " + outputStream.buffer.toList())
        val size = uvarintSize(i)

        println("Size=$size")

        check(expected == size) { "Mismatch for $i, expected=${expected},size=$size" }

        val inputStream = CustomStream<Byte>(ArrayDeque(outputStream.toByteArray().toList()))
        println("In buffer B: " + inputStream.buffer.toList())
        val xi = inputStream.readUnsignedVarInt().expectNoErrors()

        check(i == xi) { "i != xi: i=$i, xi=$xi" }
    }
}
